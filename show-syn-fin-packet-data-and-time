#!/usr/bin/gawk -f

# Simple script to summarize data from "tcpdump" to show the amount
# of traffic sent/received.  It shows the amount of data on a per
# connection basis and then summarized by sending IP address once it
# exhausts the input file.
#
# Either run it with data from "tcpdump" piped into it:
#
# tcpdump -n -l -p 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0' | show-syn-fin-packet-data
#
# to see traffic data for TCP connections as they shutdown.  Or save
# the "tcpdump" output to a file and run the script against the file
# sometime later.
#
# tcpdump -n -l -p 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0' >/var/tmp/tcp-connection-summary.txt
# show-syn-fin-packet-data /var/tmp/tcp-connection-summary.txt
#

BEGIN \
{
    SYN = "S"
    FIN = "F"
    FINPUSH = "FP"
    DELIM = ":"
    DOT = "."

    SECS_PER_MIN = 60
    SECS_PER_HOUR = SECS_PER_MIN * 60
    SECS_PER_DAY = SECS_PER_HOUR * 24

    SOCK_LIFETIME = 120
    CKPT_INTERVAL = 500

    printf "Scanning data for FIN/SYN pairs, maximum socket lifetime %d seconds\n", SOCK_LIFETIME
    fflush()
}

function hrv(rawnumber) \
{
    shownumber = rawnumber
    unit = "b"

    if(shownumber > 1024)
    {
	unit = "k"
	shownumber /= 1024.0
	if(shownumber > 1024.0)
        {
	    unit = "m"
	    shownumber /= 1024.0
	    if(shownumber > 1024.0)
	    {
		unit = "g"
		shownumber /= 1024.0
		if(shownumber > 1024.0)
	        {
		    unit = "t"
		    shownumber /= 1024.0
		}
	    }
	}
    }

    display = sprintf("%.2f%s", shownumber, unit)
    return(display)
}

function timestring_to_secs(time_string) \
{
    nn = split(time_string, parts, ":")

    return( parts[1] * SECS_PER_HOUR + parts[2] * SECS_PER_MIN + parts[3])
}

function calc_elap_time(syn_time, fin_time) \
{
    nn = split(syn_time, parts, ":")
    syn_secs = parts[1] * SECS_PER_HOUR + parts[2] * SECS_PER_MIN + parts[3]

    nn = split(fin_time, parts, ":")
    fin_secs = parts[1] * SECS_PER_HOUR + parts[2] * SECS_PER_MIN + parts[3]

    if( fin_secs < syn_secs ) fin_secs += SECS_PER_DAY

    delete parts

    return(fin_secs - syn_secs)
}

$2 == "IP" && / seq / && /Flags / \
{
    when = $1

    key = $3 DELIM $5
    sub(":$", "", key)

    fl = $0
    sub(".*Flags \\[", "", fl)
    sub("\\].*", "", fl)
    gsub("\\.", "", fl)

    if(fl == SYN || fl == FIN || fl == FINPUSH)
    {
	seq = $0
	sub(".*seq ", "", seq)
	sub(",.*", "", seq)
	if(fl == FINPUSH)
	{
	    sub(".*:", "", seq)
	    fl = FIN
	}
	seq += 0

	count[key DELIM fl] = seq
	stamp[key DELIM fl] = when

	if(fl == FIN)
	{
	    if(count[key DELIM SYN] != "")
	    {
                nsock++
                elap = calc_elap_time(stamp[key DELIM SYN], when)
	        disp = key
	        sub(DELIM, " -> ", disp)
	        printf "%4d. %s %12.6f %8d %8s %s\n", nsock, strftime("%Y/%m/%d-%H:%M:%S"), elap, seq, hrv(seq), disp
                fflush()

                delete count[key DELIM SYN]
                delete stamp[key DELIM SYN]
            }

            delete count[key DELIM fl]
            delete stamp[key DELIM fl]
	}

    }

    if( nsock && nsock % CKPT_INTERVAL == 0 )
    {
        now = timestring_to_secs(strftime("%H:%M:%S"))

        nn_count = length(count)
        nn_stamp = length(stamp)

        # ---

        for( key in stamp )
        {
            if( stamp[key] != "" )
	    {
		key_age = now - int(timestring_to_secs(stamp[key]))
                if( key_age < 0 ) key_age += SECS_PER_DAY
                if( 0 <= key_age && key_age <= SOCK_LIFETIME ) copy_stamp[key] = stamp[key]
                else
		{
		    printf "Dropped unpaired SYN packet from %s, %d secs ago, key %s\n", stamp[key], key_age, key
		    fflush()
		}
	    }
        }

        delete stamp
        for( key in copy_stamp ) stamp[key] = copy_stamp[key]
        delete copy_stamp

        # ---

        for( key in count )
        {
            if( count[key] != "" && stamp[key] != "" ) copy_count[key] = count[key]
        }

        delete count
        for( key in copy_count ) count[key] = copy_count[key]
        delete copy_count

        # ---

#        printf "dbg:: Count: pre/post: %d/%d  Stamp: pre/pos: %d/%d\n", nn_count, length(count), nn_stamp, length(stamp)
#	fflush()
#
#        seq = 1
#        for(key in count)
#        {
#            printf "dbg:: %d. k'%s' count'%s' stamp'%s'\n", seq, key, count[key], stamp[key]
#            seq++
#        }
    }
}
